{"version":3,"sources":["data/useVaccineData.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetcher","url","Promise","resolve","reject","jsonp","error","data","strNumToInt","inp","parseInt","replace","parseRecord","record","report_date","Date","previous_day_doses_administered","total_doses_administered","total_doses_in_fully_vaccinated_individuals","total_individuals_fully_vaccinated","useVaccineData","useSWR","failed","loading","records","result","map","r","at_least_1","a1","a2","res","mxlen","Math","max","length","i","n1","n2","push","subtract","derived","at_least_1_ratio","arr","by","num","multiply","App","useEffect","chartData","labels","d","toDateString","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAGMA,EAAU,SAACC,GAAD,OACd,IAAIC,SAAQ,SAACC,EAASC,GACpBC,IACE,oHACA,SAACC,EAAOC,GACNJ,EAAQI,UA6ChB,SAASC,EAAYC,GACnB,OAAOA,EAAMC,SAASD,EAAIE,QAAQ,KAAM,KAAO,EAGjD,SAASC,EAAYC,GACnB,MAAO,CACLC,YAAa,IAAIC,KAAKF,EAAOC,aAC7BE,gCAAiCR,EAC/BK,EAAOG,iCAETC,yBAA0BT,EAAYK,EAAOI,0BAC7CC,4CAA6CV,EAC3CK,EAAOK,6CAETC,mCAAoCX,EAClCK,EAAOM,qCAKE,SAASC,IAAkB,IAAD,MACVC,YAAO,YAAarB,GAAzCO,EAD+B,EAC/BA,KAEFe,IAHiC,EACzBhB,MAGRiB,GAAWhB,EAIXiB,GAFkB,iBAAGjB,QAAH,IAAGA,GAAH,UAAGA,EAAMkB,cAAT,aAAG,EAAcD,eAAjB,QAA4B,IAEHE,IAAId,GAE/CO,EAA+CK,EAAQE,KAC3D,SAACC,GAAD,OAAOA,EAAER,sCAGLF,EAAqCO,EAAQE,KACjD,SAACC,GAAD,OAAOA,EAAEV,4BAGLW,EA7DR,SAAkBC,EAAcC,GAK9B,IAJA,IAAMC,EAAgB,GAEhBC,EAAQC,KAAKC,IAAIL,EAAGM,OAAQL,EAAGK,QAE5BC,EAAI,EAAGA,EAAIJ,EAAOI,IAAK,CAC9B,IAAMC,EAAKR,EAAGM,OAASC,EAAIP,EAAGO,GAAK,EAC7BE,EAAKR,EAAGK,OAASC,EAAIN,EAAGM,GAAK,EAEnCL,EAAIQ,MAAK,OAACF,QAAD,IAACA,IAAM,IAAP,OAAaC,QAAb,IAAaA,IAAM,IAG9B,OAAOP,EAiDYS,CACjBvB,EACAE,GAKF,MAAO,CACLZ,KAAMiB,EACNF,SACAC,UACAkB,QAAS,CACPb,aACAc,iBA3DN,SAAkBC,EAAeC,GAC/B,OAAOD,EAAIjB,KAAI,SAACmB,GAAD,OAASA,EAAMD,KAIvBE,CA8CyBlB,EA9CX,EAtBI,QA6ErBT,qCACAF,6B,mBC7BS8B,MAvEf,WAAgB,IAAD,EACa3B,IAAlBb,EADK,EACLA,KAAMkC,EADD,EACCA,QAEdO,qBAAU,WACR3C,IACE,oHACA,SAACC,EAAOC,SAET,IAEH,IAAM0C,EAAY,CAChBC,OAAQ3C,EAAKmB,KAAI,SAACyB,GAAD,OAAOA,EAAErC,YAAYsC,kBACtCC,SAAU,CACR,CACEC,MAAO,qDACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBhE,KAAMkC,EAAQC,oBAgCpB,OACE,8BACE,cAAC,OAAD,CAAMnC,KAAM0C,OC1DHuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2764b9f0.chunk.js","sourcesContent":["import jsonp from \"jsonp\";\nimport useSWR from \"swr\";\n\nconst fetcher = (url: string) =>\n  new Promise((resolve, reject) => {\n    jsonp(\n      \"https://data.ontario.ca/api/3/action/datastore_search?resource_id=8a89caa9-511c-4568-af89-7f2174b4378c&limit=365\",\n      (error, data) => {\n        resolve(data);\n      }\n    );\n  });\n\nexport interface VaccineDataRecord {\n  report_date: Date;\n  previous_day_doses_administered: number;\n  total_doses_administered: number;\n  total_doses_in_fully_vaccinated_individuals: number;\n  total_individuals_fully_vaccinated: number;\n}\nexport interface UnparsedVaccineDataRecord {\n  report_date: string;\n  previous_day_doses_administered: string;\n  total_doses_administered: string;\n  total_doses_in_fully_vaccinated_individuals: string;\n  total_individuals_fully_vaccinated: string;\n}\n\nconst ontario_population = 14.57 * 1000000;\n\nfunction subtract(a1: number[], a2: number[]): number[] {\n  const res: number[] = [];\n\n  const mxlen = Math.max(a1.length, a2.length);\n\n  for (let i = 0; i < mxlen; i++) {\n    const n1 = a1.length > i ? a1[i] : 0;\n    const n2 = a2.length > i ? a2[i] : 0;\n\n    res.push((n1 ?? 0) - (n2 ?? 0));\n  }\n\n  return res;\n}\n\nfunction multiply(arr: number[], by: number): number[] {\n  return arr.map((num) => num * by);\n}\n\nfunction divide(arr: number[], by: number): number[] {\n  return multiply(arr, 1 / by);\n}\n\nfunction strNumToInt(inp: string) {\n  return inp ? parseInt(inp.replace(/,/g, \"\")) : 0;\n}\n\nfunction parseRecord(record: UnparsedVaccineDataRecord): VaccineDataRecord {\n  return {\n    report_date: new Date(record.report_date),\n    previous_day_doses_administered: strNumToInt(\n      record.previous_day_doses_administered\n    ),\n    total_doses_administered: strNumToInt(record.total_doses_administered),\n    total_doses_in_fully_vaccinated_individuals: strNumToInt(\n      record.total_doses_in_fully_vaccinated_individuals\n    ),\n    total_individuals_fully_vaccinated: strNumToInt(\n      record.total_individuals_fully_vaccinated\n    ),\n  };\n}\n\nexport default function useVaccineData() {\n  const { data, error }: any = useSWR(\"/api/user\", fetcher);\n\n  const failed = !!error;\n  const loading = !data;\n\n  const tempRecords: any[] = data?.result?.records ?? [];\n\n  const records: VaccineDataRecord[] = tempRecords.map(parseRecord);\n\n  const total_individuals_fully_vaccinated: number[] = records.map(\n    (r) => r.total_individuals_fully_vaccinated\n  );\n\n  const total_doses_administered: number[] = records.map(\n    (r) => r.total_doses_administered as any\n  );\n\n  const at_least_1 = subtract(\n    total_doses_administered,\n    total_individuals_fully_vaccinated\n  );\n\n  const at_least_1_ratio = divide(at_least_1, ontario_population);\n\n  return {\n    data: records,\n    failed,\n    loading,\n    derived: {\n      at_least_1,\n      at_least_1_ratio,\n      total_individuals_fully_vaccinated,\n      total_doses_administered\n    },\n  };\n}\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport jsonp from \"jsonp\";\nimport useVaccineData from \"./data/useVaccineData\";\nimport { Line } from \"react-chartjs-2\";\n\nfunction App() {\n  const { data, derived } = useVaccineData();\n\n  useEffect(() => {\n    jsonp(\n      \"https://data.ontario.ca/api/3/action/datastore_search?resource_id=8a89caa9-511c-4568-af89-7f2174b4378c&limit=365\",\n      (error, data) => {}\n    );\n  }, []);\n\n  const chartData = {\n    labels: data.map((d) => d.report_date.toDateString()),\n    datasets: [\n      {\n        label: 'Ratio of Ontario population with at least one dose',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: derived.at_least_1_ratio\n      }\n    ]\n  };\n\n  // const chartData = {\n  //   labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  //   datasets: [\n  //     {\n  //       label: 'My First dataset',\n  //       fill: false,\n  //       lineTension: 0.1,\n  //       backgroundColor: 'rgba(75,192,192,0.4)',\n  //       borderColor: 'rgba(75,192,192,1)',\n  //       borderCapStyle: 'butt',\n  //       borderDash: [],\n  //       borderDashOffset: 0.0,\n  //       borderJoinStyle: 'miter',\n  //       pointBorderColor: 'rgba(75,192,192,1)',\n  //       pointBackgroundColor: '#fff',\n  //       pointBorderWidth: 1,\n  //       pointHoverRadius: 5,\n  //       pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n  //       pointHoverBorderColor: 'rgba(220,220,220,1)',\n  //       pointHoverBorderWidth: 2,\n  //       pointRadius: 1,\n  //       pointHitRadius: 10,\n  //       data: [65, 59, 80, 81, 56, 55, 40]\n  //     }\n  //   ]\n  // };\n\n  return (\n    <div>\n      <Line data={chartData}></Line>\n    </div>\n  );\n}\n\nexport default App;\n ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}