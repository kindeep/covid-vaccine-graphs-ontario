{"version":3,"sources":["data/useVaccineData.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["fetcher","url","Promise","resolve","reject","jsonp","error","data","strNumToInt","inp","parseInt","replace","parseRecord","record","report_date","Date","previous_day_doses_administered","total_doses_administered","total_doses_in_fully_vaccinated_individuals","total_individuals_fully_vaccinated","App","useSWR","failed","loading","result","records","map","at_least_1","at_least_1_ratio","useVaccineData","allDates","byDate","currDate","push","getTime","x1","y1","x2","y2","dataMap","extrMap","length","last","lastIndex","findIndex","r","toDateString","f","x","forEach","date","index","val","ratios","extr","chartData","labels","d","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","type","borderWidth","style","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAGMA,EAAU,SAACC,GAAD,OACd,IAAIC,SAAQ,SAACC,EAASC,GACpBC,IACE,oHACA,SAACC,EAAYC,GACXJ,EAAQI,UAkDhB,SAASC,EAAYC,GACnB,OAAOA,EAAMC,SAASD,EAAIE,QAAQ,KAAM,KAAO,EAGjD,SAASC,EAAYC,GACnB,MAAO,CACLC,YAAa,IAAIC,KAAKF,EAAOC,aAC7BE,gCAAiCR,EAC/BK,EAAOG,iCAETC,yBAA0BT,EAAYK,EAAOI,0BAC7CC,4CAA6CV,EAC3CK,EAAOK,6CAETC,mCAAoCX,EAClCK,EAAOM,qC,mBC2BEC,MAtFf,WAOE,IAPc,IACNb,ED+DK,WAA2B,IAAD,MACVc,YAAO,YAAarB,GAAzCO,EAD+B,EAC/BA,KAEFe,IAHiC,EACzBhB,MAGRiB,GAAWhB,EAkBjB,MAAO,CACLA,MAjBsB,iBAAGA,QAAH,IAAGA,GAAH,UAAGA,EAAMiB,cAAT,aAAG,EAAcC,eAAjB,QAA4B,IAEHC,IAAId,GAEFc,KAAI,SAACb,GACtD,IAAMc,EACJd,EAAOI,yBACPJ,EAAOM,mCACHS,EAAmBD,EA3DK,OA4D9B,OAAO,2BACFd,GADL,IAEEc,aACAC,wBAMFN,SACAC,WCxFeM,GAATtB,KAEFuB,EAAmB,GACnBC,EAAS,IAAIhB,KAAK,gBACpBiB,EAAW,IAAIjB,KAAK,qBAEjBiB,GAAYD,GACjBD,EAASG,KAAKD,GACdA,EAAW,IAAIjB,KAAKiB,EAASE,UAjBd,OAoBjB,IAlBYC,EAAYC,EAAYC,EAAYC,EAkB1CC,EAAmD,GACnDC,EAAqC,GAE3C,GAAIjC,GAAQA,EAAKkC,OAAS,EAAG,CAC3B,IAAMC,EAAOnC,EAAKA,EAAKkC,OAAS,GAC1BE,EAAYb,EAASc,WACzB,SAACC,GAAD,OAAOA,EAAEC,iBAAmBJ,EAAK5B,YAAYgC,kBAEzCC,GA1BIZ,EA0BKQ,EA1BOP,EA0BIM,EAAKd,iBA1BGS,EA0BeP,EAASW,OAAS,EA1BrBH,EA0BwB,IA1BT,SAC/DU,GAEA,OAASV,EAAKF,IAAOC,EAAKF,IAAQa,EAAIb,GAAMC,IAyB1CN,EAASmB,SAAQ,SAACC,EAAMC,GAClBD,GAAQR,EAAK5B,cACf0B,EAAQU,EAAKJ,gBAAkBC,EAAEI,OAKvC5C,EAAK0C,SAAQ,SAACG,GACZb,EAAQa,EAAItC,YAAYgC,gBAAkBM,KAG5C,IAAMC,EAASvB,EAASJ,KAAI,SAACwB,GAAU,IAAD,EACpC,iBAAOX,EAAQW,EAAKJ,uBAApB,aAAO,EAA8BlB,oBAGjC0B,EAAOxB,EAASJ,KAAI,SAACwB,GACzB,OAAOV,EAAQU,EAAKJ,mBAGhBS,EAAsC,CAC1CC,OAAQ1B,EAASJ,KAAI,SAAC+B,GAAD,OAAOA,EAAEX,kBAC9BY,SAAU,CACR,CACEC,MAAO,qDACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBrE,KAAM8C,GAER,CACEwB,KAAM,OACNlB,MAAO,wCACPC,MAAM,EACNE,gBAAiB,gBACjBC,YAAa,sBACbxD,KAAM+C,EACNW,WAAY,CAAC,GAAI,IACjBa,YAAa,EACbV,iBAAkB,mBAKxB,OACE,qBAAKW,MAAO,CAAEC,OAAQ,SAAtB,SACE,cAAC,OAAD,CAAMzE,KAAMgD,OCjFH0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.14e989e4.chunk.js","sourcesContent":["import jsonp from \"jsonp\";\nimport useSWR from \"swr\";\n\nconst fetcher = (url: string) =>\n  new Promise((resolve, reject) => {\n    jsonp(\n      \"https://data.ontario.ca/api/3/action/datastore_search?resource_id=8a89caa9-511c-4568-af89-7f2174b4378c&limit=365\",\n      (error: any, data: any) => {\n        resolve(data);\n      }\n    );\n  });\n\nexport interface VaccineDataRecord {\n  report_date: Date;\n  previous_day_doses_administered: number;\n  total_doses_administered: number;\n  total_doses_in_fully_vaccinated_individuals: number;\n  total_individuals_fully_vaccinated: number;\n}\n\nexport interface ResVaccineDataRecord extends VaccineDataRecord {\n  at_least_1: number;\n  at_least_1_ratio: number;\n}\nexport interface UnparsedVaccineDataRecord {\n  report_date: string;\n  previous_day_doses_administered: string;\n  total_doses_administered: string;\n  total_doses_in_fully_vaccinated_individuals: string;\n  total_individuals_fully_vaccinated: string;\n}\n\nexport const ontario_population = 14.57 * 1000000;\n\nexport function subtract(a1: number[], a2: number[]): number[] {\n  const res: number[] = [];\n\n  const mxlen = Math.max(a1.length, a2.length);\n\n  for (let i = 0; i < mxlen; i++) {\n    const n1 = a1.length > i ? a1[i] : 0;\n    const n2 = a2.length > i ? a2[i] : 0;\n\n    res.push((n1 ?? 0) - (n2 ?? 0));\n  }\n\n  return res;\n}\n\nfunction multiply(arr: number[], by: number): number[] {\n  return arr.map((num) => num * by);\n}\n\nexport function divide(arr: number[], by: number): number[] {\n  return multiply(arr, 1 / by);\n}\n\nfunction strNumToInt(inp: string) {\n  return inp ? parseInt(inp.replace(/,/g, \"\")) : 0;\n}\n\nfunction parseRecord(record: UnparsedVaccineDataRecord): VaccineDataRecord {\n  return {\n    report_date: new Date(record.report_date),\n    previous_day_doses_administered: strNumToInt(\n      record.previous_day_doses_administered\n    ),\n    total_doses_administered: strNumToInt(record.total_doses_administered),\n    total_doses_in_fully_vaccinated_individuals: strNumToInt(\n      record.total_doses_in_fully_vaccinated_individuals\n    ),\n    total_individuals_fully_vaccinated: strNumToInt(\n      record.total_individuals_fully_vaccinated\n    ),\n  };\n}\n\nexport default function useVaccineData() {\n  const { data, error }: any = useSWR(\"/api/user\", fetcher);\n\n  const failed = !!error;\n  const loading = !data;\n\n  const tempRecords: any[] = data?.result?.records ?? [];\n\n  const records: VaccineDataRecord[] = tempRecords.map(parseRecord);\n\n  const resRecords: ResVaccineDataRecord[] = records.map((record) => {\n    const at_least_1 =\n      record.total_doses_administered -\n      record.total_individuals_fully_vaccinated;\n    const at_least_1_ratio = at_least_1 / ontario_population;\n    return {\n      ...record,\n      at_least_1,\n      at_least_1_ratio,\n    };\n  });\n\n  return {\n    data: resRecords,\n    failed,\n    loading,\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport useVaccineData, { ResVaccineDataRecord } from \"./data/useVaccineData\";\nimport { ChartData, Line } from \"react-chartjs-2\";\nimport { ChartData as OrigChartData } from \"chart.js\";\n\nconst one_day_ms = 86400000;\n\nconst line = (x1: number, y1: number, x2: number, y2: number) => (\n  x: number\n) => {\n  return ((y2 - y1) / (x2 - x1)) * (x - x1) + y1;\n};\n\nfunction App() {\n  const { data } = useVaccineData();\n\n  const allDates: Date[] = [];\n  const byDate = new Date(\"June 5, 2021\");\n  let currDate = new Date(\"December 24, 2020\");\n\n  while (currDate <= byDate) {\n    allDates.push(currDate);\n    currDate = new Date(currDate.getTime() + one_day_ms);\n  }\n\n  const dataMap: { [key: string]: ResVaccineDataRecord } = {};\n  const extrMap: { [key: string]: number } = {};\n\n  if (data && data.length > 0) {\n    const last = data[data.length - 1];\n    const lastIndex = allDates.findIndex(\n      (r) => r.toDateString() === last.report_date.toDateString()\n    );\n    const f = line(lastIndex, last.at_least_1_ratio, allDates.length - 1, 0.75);\n\n    allDates.forEach((date, index) => {\n      if (date >= last.report_date) {\n        extrMap[date.toDateString()] = f(index);\n      }\n    });\n  }\n\n  data.forEach((val) => {\n    dataMap[val.report_date.toDateString()] = val;\n  });\n\n  const ratios = allDates.map((date) => {\n    return dataMap[date.toDateString()]?.at_least_1_ratio;\n  });\n\n  const extr = allDates.map((date) => {\n    return extrMap[date.toDateString()];\n  });\n\n  const chartData: ChartData<OrigChartData> = {\n    labels: allDates.map((d) => d.toDateString()),\n    datasets: [\n      {\n        label: \"Ratio of Ontario population with at least one dose\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: ratios,\n      },\n      {\n        type: \"line\",\n        label: \"Required trajectory for 75% by June 5\",\n        fill: false,\n        backgroundColor: \"rgba(0,0,0,0)\",\n        borderColor: \"rgba(75, 75, 75, 1)\",\n        data: extr,\n        borderDash: [20, 20],\n        borderWidth: 0,\n        pointBorderColor: \"rgba(0,0,0,0)\",\n      },\n    ],\n  };\n\n  return (\n    <div style={{ height: \"100vh\" }}>\n      <Line data={chartData}></Line>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}